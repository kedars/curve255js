// Generated by CoffeeScript 1.4.0
(function() {
  var cmp, doit, e1, e1e2k, e1k, e2, e2e1k, e2k, echo, env, fail, fromHex, fs, hex2ibh, inBrowser, k, l, last, pass, printKey, stderr, stdout, toHex, toIbh, write, xor;

  inBrowser = (typeof window !== "undefined" && window !== null ? window.document : void 0) != null;

  if (inBrowser) {
    env = window;
    echo = function(x) {
      var element;
      element = window.document.createElement('span');
      element.innerHTML = x;
      return window.document.body.appendChild(element);
    };
    fail = function(reason) {
      var msg;
      if (reason == null) {
        reason = "";
      }
      msg = "Failed!  " + reason;
      if (reason != null) {
        msg = msg + "  " + reason;
      }
      echo(msg);
      throw "Test failed!";
    };
    echo(". ");
  } else {
    fs = require("fs");
    env = (function() {
      return this;
    })();
    env["eval"](fs.readFileSync("../curve255.js").toString());
    stdout = process.stdout;
    stderr = process.stderr;
    write = function(x) {
      return stdout.write(x);
    };
    echo = function(x) {
      return write(x + "\n");
    };
    fail = function(reason) {
      echo("Failed!  " + reason);
      return process.exit(1);
    };
  }

  pass = function() {
    return echo("Passed!");
  };

  fromHex = env.c255lhexdecode;

  toHex = env.c255lhexencode;

  hex2ibh = function(x) {
    x = new Array(64 + 1 - x.length).join("0") + x;
    return x.split(/(..)/).reverse().join("");
  };

  toIbh = function(x) {
    return hex2ibh(toHex(x));
  };

  printKey = function(x) {
    return write(toIbh(x));
  };

  cmp = env.c255lbigintcmp;

  xor = function(a, b) {
    var r, x, _i;
    r = env.c255lzero();
    for (x = _i = 15; _i >= 0; x = --_i) {
      r[x] = a[x] ^ b[x];
    }
    return r;
  };

  doit = function(e, k) {
    var ek;
    ek = env.curve25519_raw(e, k);
    return ek;
  };

  e1 = fromHex("3");

  e2 = fromHex("5");

  k = fromHex("9");

  l = 0;

  while (l < 25) {
    e1k = doit(e1, k);
    e2e1k = doit(e2, e1k);
    e2k = doit(e2, k);
    e1e2k = doit(e1, e2k);
    if (cmp(e1e2k, e2e1k)) {
      fail();
    } else {
      last = e1e2k;
    }
    e1 = xor(e1, e2k);
    e2 = xor(e2, e1k);
    k = xor(k, e1e2k);
    l++;
  }

  if ("a8a6d3dbb021502f5b7d712de1c716c7d110c3f5118e0a434e6aec81d5cb3809" !== toIbh(last)) {
    fail("Final key is incorrect " + (toIbh(last)));
  }

  console.log("Final key obtained: " + toIbh(last));

  pass();

}).call(this);
